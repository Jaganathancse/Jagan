---
version: '2.0'
name: tripleo.derive_params_formalas.v1
description: TripleO Workflows to derive deployment parameters from the introspected data

workflows:


  dpdk_derive_params:
    description: >
      Workflow to derive parameters for DPDK service.
    input:
      - plan
      - role_name
      - introspection_data
      - environment_parameters
      - heat_resource_tree
      - user_inputs
      - mtu_default: 1500

    output:
      dpdk_core_list: <% $.get('dpdk_core_list', '') %>
      dpdk_socket_memory: <% $.get('dpdk_socket_memory', '') %>
      dpdk_memory_channels: <% $.get('dpdk_memory_channels', '') %>      
      status: <% $.get('status', 'SUCCESS) %>
      message: <% $.get('message', '') %>

    tasks:
      get_network_config:
        action: tripleo.parameters.get_network_config container=<% $.plan %> role_name=<% $.role_name %>
        publish:
          network_config: <% task().result %>
        on-success: get_interfaces_info
        on-error: set_status_failed_get_network_config

      get_interfaces_info:
        publish:
          interfaces_info: <% list($.introspection_data.get('inventory', {}).get('interfaces', []).where($.get('has_carrier', false)).select($.name)) %>
        on-success:
          - get_dpdk_interfaces_info: <% $.interfaces_info %>
          - set_status_failed_get_interfaces_info: <% not $.interfaces_info %>

      get_dpdk_interfaces_info:
        publish:
          dpdk_interfaces_info: <% $.network_config.where($.containsKey('members')).select($.members).where($.any($.get('type', '') = 'ovs_dpdk_port')).flatten() %>
        on-success:
          - get_dpdk_interface_list: <% $.dpdk_interfaces_info %>
          - set_status_failed_get_dpdk_interfaces_info: <% not $.dpdk_interfaces_info %>

      get_dpdk_interface_list:
        publish:
          dpdk_interfaces: <% let(interfaces => $.interfaces_info) -> $.dpdk_interfaces_info.select($.members.first({}).get('name', '')).select($interfaces[int($.replace('nic',''))-1]) %>
        on-success:
          - get_dpdk_nics_numa_info: <% $.dpdk_interfaces %>
          - set_status_failed_get_dpdk_interface_list: <% not $.dpdk_interfaces %>

      get_dpdk_nics_numa_info:
        publish:
          dpdk_nics: <% let(interfaces => $.dpdk_interfaces) -> $.introspection_data.numa_topology.nics.where($.name in $interfaces) %>
        on-success:
          - get_dpdk_nics_numa_nodes: <% $.dpdk_nics %>
          - set_status_failed_get_dpdk_nics_numa_info: <% not $.dpdk_nics %>

      get_dpdk_nics_numa_nodes:
        publish:
          dpdk_nics_numa_nodes: <% $.dpdk_nics.groupBy($.numa_node).select($[0]).orderBy($) %>
        on-success:
          - get_cpus: <% $.dpdk_nics_numa_nodes %>
          - set_status_failed_get_dpdk_nics_numa_nodes: <% not $.dpdk_nics_numa_nodes %>

      get_cpus:
        publish:
          cpus: <% $.introspection_data.numa_topology.cpus %>
        on-success:
          - get_min_thread_on_numa_nodes: <% $.cpus %>
          - set_status_failed_get_cpus: <% not $.cpus %>

      get_min_thread_on_numa_nodes:
        publish:
          min_threads: <% $.cpus.groupBy($.numa_node).select(dict('numa_node' => $[0], 'min_thread' => $[1].select($.thread_siblings).flatten().min())) %>
        on-success:
          - get_available_cpus: <% $.min_threads %>
          - set_status_failed_get_min_thread_on_numa_nodes: <% not $.min_threads %>

      get_available_cpus:
        publish:
          available_cpus: <% let(nodes => $.dpdk_nics_numa_nodes, min_threads => $.min_threads)-> $.cpus.where($.numa_node in $nodes and  not (let(node => $.numa_node)-> $min_threads.where($.numa_node = $node).min_thread.first(0)) in $.thread_siblings).groupBy($.numa_node).toDict($[0],list($[1].thread_siblings)) %>
        on-success:
          - get_threads_per_core: <% $.available_cpus %>
          - set_status_failed_get_available_cpus: <% not $.available_cpus %>

      get_threads_per_core:
        publish:
          threads_per_core: <% $.cpus.first({}).get('thread_siblings',[]).len() %>
        on-success:
          - get_dpdk_core_list: <% $.threads_per_core %>
          - set_status_failed_get_threads_per_core: <% not $.threads_per_core %>

      get_dpdk_core_list:
        publish:
          dpdk_core_list: <% let(cpus => $.available_cpus, queue_length => $.user_inputs.get('number_of_pmd_cpu_threads_per_numa_node'), threads_per_core => $.threads_per_core) -> list($.dpdk_nics_numa_nodes.select($cpus[str($)].take(switch(($queue_length mod $threads_per_core) > 0 => (int($queue_length/$threads_per_core)+1), ($queue_length mod $threads_per_core) = 0 => int($queue_length/$threads_per_core))).select($.join(",")))).join(",") %>
        on-success:
          - get_dpdk_nics_mtu: <% $.dpdk_core_list %>
          - set_status_failed_get_dpdk_core_list: <% not $.dpdk_core_list %>

      get_dpdk_nics_mtu:
        publish:
          dpdk_nics_mtu: <% let(mtu_default => $.mtu_default) -> list($.dpdk_interfaces_info.select($.get('mtu', $mtu_default))) %>
        on-success:
          - get_socket_memory: <% $.dpdk_nics_mtu %>
          - set_status_failed_get_dpdk_nics_mtu: <% not $.dpdk_nics_mtu %>

      get_socket_memory:
        publish:
          socket_memory: <% def(smcalc, ((($+800)*(4096*64))/(1024*1024)))-> let(interfaces => $.dpdk_interfaces, mtu => $.dpdk_nics_mtu) -> $.dpdk_nics.groupBy($.numa_node).select(dict('numa_node' => $[0], socket_memory => (((list($[1].select($.name).select($mtu[$interfaces.indexOf($)])).distinct().select(smcalc($)).sum()+500)/1024)+1)*1024)) %>
        on-success:
          - get_numa_nodes: <% $.socket_memory %>
          - set_status_failed_get_socket_memory: <% not $.socket_memory %>

      get_numa_nodes:
        publish:
          numa_nodes: <% $.introspection_data.numa_topology.ram.select($.numa_node).orderBy($) %>
        on-success:
          - get_dpdk_socket_memory: <% $.numa_nodes %>
          - set_status_failed_get_numa_nodes: <% not $.numa_nodes %>

      get_dpdk_socket_memory:
        publish:
          dpdk_socket_memory: <% let(sm => $.socket_memory) -> $.numa_nodes.select(let(node => $) -> $sm.where($.numa_node = $node).first({}).get('socket_memory', 0)).join(',') %>
        on-success:
          - get_memory_slot_info: <% $.dpdk_socket_memory %>
          - set_status_failed_get_dpdk_socket_memory: <% not $.dpdk_socket_memory %>

      get_memory_slot_info:
        publish:
          memory_slot_info: <% $.introspection_data.extra.memory.values().select($.get("slot")).where($) %>
        on-success:
          - get_dpdk_memory_channels: <% $.memory_slot_info %>
          - set_status_failed_get_memory_slot_info: <% not $.memory_slot_info %>

      get_dpdk_memory_channels:
        publish:
          dpdk_memory_channels: <% list($.memory_slot_info.select(let(split_var =>  $.split('-')) -> dict('node' => $split_var[0], 'slot' => $split_var[1].replace(regex('[0-9]+'),'').replace('DIMM', ''))).groupBy($.node).select(dict('node' => $[0], count => $[1].select($.slot).distinct().len())).orderBy($.node).select($.count)).join(',') %>
        on-success:
          - set_status_failed_get_dpdk_memory_channels: <% not dpdk_memory_channels %>

      set_status_failed_get_network_config:
        publish:
          status: FAILED
          message: <% task(get_network_config).result %>
        on-success: fail

     set_status_failed_get_interfaces_info:
        publish:
          status: FAILED
          message: 'Unable to determine interfaces in introspection data'
        on-success: fail

      set_status_failed_get_dpdk_interfaces_info:
        publish:
          status: FAILED
          message: 'Unable to determine DPDK interfaces information'
        on-success: fail

      set_status_failed_get_dpdk_interface_list:
        publish:
          status: FAILED
          message: "Unable to determine DPDK interfaces"
        on-success: fail

      set_status_failed_get_dpdk_nics_numa_info:
        publish:
          status: FAILED
          message: "Unable to determine NUMA information for DPDK NIC's"
        on-success: fail

      set_status_failed_get_dpdk_nics_numa_nodes:
        publish:
          status: FAILED
          message: "Unable to determine numa nodes for DPDK NIC's"
        on-success: fail

      set_status_failed_get_dpdk_nics_numa_nodes:
        publish:
          status: FAILED
          message: "Unable to determine numa nodes for DPDK NIC's"
        on-success: fail

      set_status_failed_get_cpus:
        publish:
          status: FAILED
          message: "Unable to determine CPU's on NUMA nodes of DPDK NIC's"
        on-success: fail

      set_status_failed_get_min_thread_on_numa_nodes:
        publish:
          status: FAILED
          message: 'Unable to determine min thread on NUMA nodes'
        on-success: fail

      set_status_failed_get_available_cpus:
        publish:
          status: FAILED
          message: "Unable to determine available CPU's on NUMA nodes of DPDK NIC's"
        on-success: fail

      set_status_failed_get_threads_per_core:
        publish:
          status: FAILED
          message: "Unable to determine threads per core"
        on-success: fail

      set_status_failed_get_dpdk_core_list:
        publish:
          status: FAILED
          message: 'Unable to determine DPDK core list'
        on-success: fail

      set_status_failed_get_dpdk_nics_mtu:
        publish:
          status: FAILED
          message: "Unable to determine MTU for DPDK NIC's"
        on-success: fail

      set_status_failed_get_socket_memory:
        publish:
          status: FAILED
          message: "Unable to determine socket memory on NUMA nodes of for DPDK NIC's"
        on-success: fail

      set_status_failed_get_numa_nodes:
        publish:
          status: FAILED
          message: "Unable to determine NUMA nodes for socket memory"
        on-success: fail

      set_status_failed_get_dpdk_socket_memory:
        publish:
          status: FAILED
          message: "Unable to determine dpdk socket memory on NUMA nodes of for DPDK NIC's"
        on-success: fail

      set_status_failed_get_memory_slot_info:
        publish:
          status: FAILED
          message: "Unable to determine memory slot info on NUMA nodes of for DPDK NIC's"
        on-success: fail

      set_status_failed_get_dpdk_memory_channels:
        publish:
          status: FAILED
          message: "Unable to determine dpdk memory channels on NUMA nodes of for DPDK NIC's"
        on-success: fail
