---
version: '2.0'

generate_dpdk_cores:
  description: DPDK cores list workflow
  type: direct
  input:
    - numa_topology_json

  tasks:
    get_numa_topology_info:
      on-success: get_dpdk_cores
      publish:
        valid_cpus: <% let(root=>$.numa_topology_json)-> $root.introspection_data.numa_topology.cpus.where($.numa_node in $root.introspection_data.numa_topology.nics.where($.name in $root.parameter_defaults.DpdkInterfacenames).numa_node and not 0 in $.thread_siblings).groupBy($.numa_node).toDict($[0],list($[1].thread_siblings)) %>
        nodes_nics_count: <% let(root=>$.numa_topology_json)-> $root.introspection_data.numa_topology.nics.where($.name in $root.parameter_defaults.DpdkInterfacenames).groupBy($.numa_node).toDict($[0],$[1].len()) %>   
        nics_per_core: <% let(root=>$.numa_topology_json)->len($root.introspection_data.numa_topology.cpus.where($.numa_node in $root.introspection_data.numa_topology.nics.where($.name in $root.parameter_defaults.DpdkInterfacenames).numa_node and not 0 in $.thread_siblings).groupBy($.numa_node).toDict($[0],list($[1].thread_siblings)).values().first()[0]) %>
        queue_length: <% let(root=>$.numa_topology_json)->$root.parameter_defaults.DpdkNoOfQueues %>

    get_dpdk_cores:
      publish:
        dpdk_cores: <% let(cpus=>$.valid_cpus, nics_count=>$.nodes_nics_count, nics_per_core=> $.nics_per_core, queue_length=>$.queue_length)-> list($nics_count.keys().orderBy($).select($cpus[str($)].take(switch((($nics_count[$]*$queue_length) mod $nics_per_core) > 0 => (int(($nics_count[$]*$queue_length)/$nics_per_core)+1), (($nics_count[$]*$queue_length) mod $nics_per_core) = 0 => int(($nics_count[$]*$queue_length)/$nics_per_core))).select($.join(",")))).join(",") %>
